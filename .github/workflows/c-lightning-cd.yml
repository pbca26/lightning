name: c-lightning CD

on:
  push:
    branches: 
        - '**'
  pull_request:
    branches: 
        - '**'
jobs:

  # Build Linux x86 64bit build
  linux-build-x86_64:
    # runs-on: ubuntu-18.04
    runs-on: [self-hosted, linux, x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          ref: 'master'
    - run: git fetch --prune --unshallow
    
    - name: apt update
      run: sudo apt-get update
      
    - name: Installing dependencies
      run: |
        sudo apt-get install -y autoconf automake build-essential sudo libtool libgmp-dev \
        libsqlite3-dev python3 python3-mako net-tools zlib1g-dev libsodium-dev \
        gettext wget libcurl3-gnutls ninja-build libssl-dev \
        libcurl4-gnutls-dev libevent-dev
        
    - name: configure
      run: |
        rm c-lightning-linux-x86_64-*.tar.gz | true && \
        mkdir -p dist && \
        ./configure --enable-static --prefix=$PWD/dist
      
    - name: make
      run: |
        make -j$((`nproc`-1)) && \
        make install
      
    - name: Extract git tag
      shell: bash
      run: echo "##[set-output name=gittag;]$(echo $(git describe --always))"
      id: extract_git_tag

    - name: List files
      run: |
        pwd && \
        tar -czvf c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz dist && \
        ls -lh c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz

    - name: Upload c-lightning-linux-x86_64 release files
      uses: actions/upload-artifact@v2
      with:
        name: c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
        path: /home/satinder/actions-runner-ln/_work/lightning/lightning/c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz

    - name: Clean Up after build uploaded
      run: |
        pwd && \
        rm -rf dist


  # Build Linux ARM 64bit build
  linux-build-arm64:
     runs-on: [self-hosted, linux, ARM64, Raspberry-Pi]
  
     steps:
     - name: Checkout code
       uses: actions/checkout@v2
       with:
           ref: 'master'
     - run: git fetch --prune --unshallow
       
     - name: configure
       run: |
        rm c-lightning-linux-aarch64-*.tar.gz | true && \
        mkdir -p dist && \
        ./configure --enable-static --prefix=$PWD/dist
      
     - name: make
       run: |
        make -j$((`nproc`-1)) && \
        make install
       
     - name: Extract git tag
       shell: bash
       run: echo "##[set-output name=gittag;]$(echo $(git describe --always))"
       id: extract_git_tag
  
     - name: List files
       run: |
         pwd && \
         tar -czvf c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz dist && \
         ls -lh c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
  
     - name: Upload c-lightning-linux release files
       uses: actions/upload-artifact@v2
       with:
         name: c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
         path: /home/pi/actions-runner-ln/_work/lightning/lightning/c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz

    #  - name: Cleanup after build
    #    run: sleep 10 && rm -rf /home/pi/actions-runner-ln/_work/lightning &



  # Build MacOS 64bit build
  macos-build-x86_64:
    runs-on: macos-10.14

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          ref: 'master'
    - run: git fetch --prune --unshallow
    
    - name: Install deps (macOS)
      run: |
          brew update
          brew install zlib
          brew install autoconf
          brew install automake
          brew install libtool
          brew install gmp
          brew install sqlite
          brew install libsodium
          brew install gettext
          brew install wget
          brew install curl
          brew install ninja
          brew install openssl
          brew install libevent
          brew install cmake
          brew install python3
          brew install gnu-sed
          brew install pyenv
          pip3 install mako

    - name: configure
      run: |
        mkdir -p dist && \
        ./configure --prefix=$PWD/dist
      
    - name: make
      run: |
          export LDFLAGS="-L/usr/local/opt/openssl/lib"
          export CPPFLAGS="-I/usr/local/opt/openssl/include"
          export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
          export OPENSSL_ROOT_DIR=/usr/local/opt/openssl
          make && \
          make install
      
    - name: Extract git tag
      shell: bash
      run: echo "##[set-output name=gittag;]$(echo $(git describe --always))"
      id: extract_git_tag

    - name: List files
      run: |
        pwd && \
        tar -czvf c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz dist && \
        ls -lh c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz

    - name: Upload c-lightning-macos-x86_64 release files
      uses: actions/upload-artifact@v2
      with:
        name: c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
        path: /Users/runner/work/lightning/lightning/c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz



  publish-release:
      name: Publishing CD releases
      runs-on: ubuntu-latest
      needs: [linux-build-x86_64, macos-build-x86_64, linux-build-arm64]
      # needs: [linux-build-x86_64, linux-build-arm64]
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
              ref: 'master'
        - run: git fetch --prune --unshallow

        - name: Extract git tag
          shell: bash
          run: echo "##[set-output name=gittag;]$(echo $(git describe --always))"
          id: extract_git_tag

        - uses: actions/download-artifact@v2
          with:
            path: artifacts
            
        - name: Display structure of downloaded files
          run: |
            pwd && \
            ls -lhRa
          working-directory: artifacts
        
        - name: Extract branch name
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: extract_branch

        - name: Shortify commit sha
          shell: bash
          run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
          id: shortify_commit

        - name: List Downloaded files
          run: |
            pwd && \
            ls -lh /home/runner/work/lightning/lightning/artifacts/c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz && \
            ls -lh /home/runner/work/lightning/lightning/artifacts/c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            ls -lh /home/runner/work/lightning/lightning/artifacts/c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.extract_git_tag.outputs.gittag }}
            release_name: ${{ steps.extract_git_tag.outputs.gittag }}
            body: |
              CD Release:
              - From Branch: ${{ steps.extract_branch.outputs.branch }}
              - SHA: ${{ steps.shortify_commit.outputs.sha_short }}
              - Version tag: ${{ steps.extract_git_tag.outputs.gittag }}
            draft: false
            prerelease: true
        
        - name: Upload Linux Release Asset
          id: upload-linux-release-asset 
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: /home/runner/work/lightning/lightning/artifacts/c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_name: c-lightning-linux-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_content_type: application/gzip
        
        - name: Upload Linux ARM64 Release Asset
          id: upload-linux-arm64-release-asset 
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: /home/runner/work/lightning/lightning/artifacts/c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_name: c-lightning-linux-aarch64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_content_type: application/gzip
          
        - name: Upload MacOS Release Asset
          id: upload-macos-release-asset 
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: /home/runner/work/lightning/lightning/artifacts/c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz/c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_name: c-lightning-macos-x86_64-${{ steps.extract_git_tag.outputs.gittag }}.tar.gz
            asset_content_type: application/gzip

